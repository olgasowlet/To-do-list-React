{"version":3,"sources":["features/tasks/tasksSlice.js","store.js","features/tasks/Form/style.js","features/tasks/Form/index.js","features/tasks/Buttons/style.js","features/tasks/Buttons/index.js","common/Section/style.js","common/Section/index.js","common/Header/style.js","common/Header/index.js","common/Container/style.js","common/Container/index.js","common/MainContainer/index.js","features/tasks/TasksList/style.js","features/tasks/TasksList/index.js","features/tasks/Tasks.js","useTasks.js","App.js","serviceWorker.js","GlobalStyle.js","index.js"],"names":["tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","task","id","done","removeTask","filter","actions","selectTasks","configureStore","reducer","tasksReducer","StyledForm","styled","form","Input","input","Button","button","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","Span","span","Buttons","props","useSelector","length","onClick","setAllDone","disabled","every","Section","section","H2","h2","Div","div","Sections","title","extrasToHeader","body","Fragment","Title","h1","StyledHeader","header","Header","className","Container","children","MainContainer","Ul","ul","Li","li","display","css","toDelete","Icon","TasksList","map","key","Tasks","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","addNewTask","useTasks","App","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a9e864b2.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        tasks: [],\n        hideDone: false,\n    },\n    reducers: {\n        addTask: ({ tasks }, { payload }) => {\n            tasks.push(payload);\n        },\n        toggleHideDone: (state) => {\n            state.hideDone = !state.hideDone;\n        },\n        toggleTaskDone: ({ tasks }, { payload }) => {\n            const index = tasks.findIndex(task => task.id === payload);\n            tasks[index].done = !tasks[index].done;\n        },\n        removeTask: ({ tasks }, { payload }) => {\n            tasks.filter(task => task.id !== payload);\n        },\n    }\n});\n\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask } = tasksSlice.actions;\nexport const selectTasks = state => state.tasks;\nexport default tasksSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport tasksReducer from \"./features/tasks/tasksSlice\";\n\nexport default configureStore({\n    reducer: {\n        tasks: tasksReducer,\n    }\n})","import styled from \"styled-components\";\n\nconst StyledForm = styled.form`\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n    flex-wrap: wrap;\n`;\n\nconst Input = styled.input`\n    border: 1px solid #ccc;\n    flex-grow: 1;\n    padding: 9px;\n    align-self: center;\n\n    @media (max-width: 767px) {\n        height: 45px;\n    }\n`;\n\nconst Button = styled.button`\n    background-color: teal;\n    box-shadow: 0 0 5px #ccc;\n    border: none;\n    color: rgba(255, 255, 255, 0.801);\n    transition: 0.5s;\n    margin-left: 15px;\n\n    &:hover {\n        opacity: 0.7;\n        transform: scale(1.1);\n    }\n\n    @media (max-width: 767px) {\n        flex-grow: 1;\n        align-self: center;\n        height: 45px;\n        margin: 10px;\n    }\n`;\n\nexport { StyledForm, Input, Button };","import React, { useState, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { addTask } from \"../tasksSlice\";\nimport { StyledForm, Input, Button } from \"./style.js\";\n\n\nconst Form = () => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const dispatch = useDispatch();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n\n        if (newTaskContent.trim() === \"\") {\n            return;\n        };\n\n        dispatch(addTask({\n            content: newTaskContent.trim(),\n            done: false,\n            id: nanoid(),\n        }));\n\n        inputRef.current.focus();\n        setNewTaskContent(\"\");\n    };\n\n    return (\n        <StyledForm onSubmit={onFormSubmit}>\n            <Input ref={inputRef} value={newTaskContent} placeholder=\"Co jest do zrobienia?\" onChange={(event) => setNewTaskContent(event.target.value)} />\n            <Button>Dodaj zadanie</Button>\n        </StyledForm>\n    );\n};\n\nexport default Form;","import styled from \"styled-components\";\n\nconst Span = styled.span`\n    display: flex;\n    justify-content: center;\n\n    @media (max-width: 466px) {\n        flex-direction: column;\n        align-items: flex-start;\n    }\n`;\n\nconst Button = styled.button`\n    border: none;\n    background-color: white;\n    color: teal;\n    padding: 0 10px;\n    transition: 0.5s;\n\n    &:hover {\n        opacity: 0.7;\n    }\n\n    &:disabled {\n        color: grey;\n    }\n\n    @media (max-width: 466px) {\n        margin: 5px 0;\n    }\n`;\n\nexport { Span, Button };\n","import React from \"react\";\nimport { Span, Button } from \"./style.js\";\nimport { selectTasks, toggleHideDone } from \"../tasksSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n\nconst Buttons = (props) => {\n    const dispatch = useDispatch();\n\n    const { tasks, hideDone } = useSelector(selectTasks);\n\n    if (tasks.length === 0) {\n        return null;\n    }\n\n    return (\n        <Span>\n            <Button onClick={() => dispatch(toggleHideDone())}>{hideDone ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}</Button>\n            <Button onClick={props.setAllDone} disabled={tasks.every(({ done }) => done)}>Ukończ wszystkie</Button>\n        </Span >\n    )\n}\n\nexport default Buttons;","import styled from \"styled-components\";\n\nconst Section = styled.section`\n    background-color: white;\n    padding: 15px;\n    box-shadow: 0 0 5px #ccc;\n    display: flex;\n    flex-wrap: wrap;\n    margin: 2px;\n`;\n\nconst H2 = styled.h2`\n    flex-grow: 1;\n    align-self: center; \n    justify-self: center;\n    margin: 8px;\n`;\n\nconst Div = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-wrap: wrap;\n    width: 100vw;\n`;\n\nexport { Section, H2, Div };","import React from \"react\";\nimport { Section, H2, Div } from \"./style.js\";\n\nconst Sections = ({ title, extrasToHeader, body }) => (\n    <React.Fragment>\n        <Section>\n            <H2>{title}</H2>\n            {extrasToHeader}\n        </Section>\n        <Section>\n            <Div>\n                {body}\n            </Div>\n        </Section>\n    </React.Fragment>\n);\n\nexport default Sections;\n","import styled from \"styled-components\";\nimport \"../../fonts.css\";\n\nconst Title = styled.h1`\n    font-size: 2.5em;\n    margin-left: 10px;\n    font-family: 'Rubik', sans-serif;\n`;\n\nconst StyledHeader = styled.header`\n\n`;\n\nexport { Title, StyledHeader };","import React from 'react';\nimport { Title, StyledHeader } from \"./style.js\";\n\nconst Header = ({title}) => (\n    <StyledHeader className=\"header\">\n        <Title className=\"header__title\">{title}</Title>\n    </StyledHeader>\n);\n\nexport default Header;","import styled from \"styled-components\";\n\nexport const Div = styled.div`\n    display: flex;\n    flex-direction: column; \n`;\n\n","import React from \"react\";\nimport { Div } from \"./style.js\";\n\n\nconst Container = (props) => (\n    <Div>\n        {props.children}\n    </Div>\n);\n\nexport default Container;\n","import React from \"react\";\n\nconst MainContainer = (props) => (\n    <main>\n        {props.children}\n    </main>\n\n)\n\nexport default MainContainer;","import styled, { css } from \"styled-components\";\n\n\nconst Ul = styled.ul`\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n`;\n\nconst Li = styled.li`\n    display: ${({ display }) => display || \"flex\"};\n    width: 100%;\n    justify-content: space-around;\n    border-bottom: 1px solid #eeeeee;\n`;\n\nconst Button = styled.button`\n    margin: 10px;\n    height: 30px;\n    width: 30px;\n    color: white;\n    box-shadow: none;\n    border: none;\n    align-self: center;\n    padding: 10px;\n    display: flex;\n    transition: 0.5s;\n\n    &:hover {\n        opacity: 0.7;\n    }\n\n    ${({ done }) => done && css`\n        background-color: green;\n    `}\n\n    ${({ toDelete }) => toDelete && css`\n        background-color: red;\n    `}\n`;\n\nconst Span = styled.span`\n    flex-grow: 1;\n    align-self: center;\n    white-space: normal;\n    text-overflow: visible;\n    padding: 5px;\n\n    ${({ done }) => done && css`\n        text-decoration: line-through;\n    `}\n`;\n\nconst Icon = styled.div`\n    text-align: center;\n    align-self: center;\n    justify-content: center;\n    align-content: flex-start;\n\n    ${({ done }) => done || css`\n        display: none;\n    `}\n`;\n\nexport { Ul, Li, Button, Span, Icon };","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice.js\";\nimport { Ul, Li, Button, Span, Icon } from \"./style.js\";\n\nconst TasksList = () => {\n    const { tasks, hideDone } = useSelector(selectTasks);\n\n    const dispatch = useDispatch();\n\n    return (\n        <Ul>\n            {tasks.map(task => (\n                <Li display={`${task.done && hideDone ? \"none\" : \"\"}`} key={task.id} >\n                    <Button done onClick={() => dispatch(toggleTaskDone(task.id))}>\n                        <Icon done={task.done} className=\"fas fa-check \"></Icon>\n                    </Button>\n                    <Span done={task.done}>\n                        {task.content}\n                    </Span>\n                    <Button toDelete onClick={() => dispatch(removeTask(task.id))}>\n                        <Icon done className=\"far fa-trash-alt\"></Icon>\n                    </Button>\n                </Li>\n            ))}\n        </Ul>\n    )\n};\n\nexport default TasksList;","import React from 'react';\nimport Form from \"./Form\";\nimport Buttons from \"./Buttons\";\nimport Section from '../../common/Section';\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\nimport MainContainer from \"../../common/MainContainer\";\nimport { useTasks } from \"../../useTasks\";\nimport TasksList from './TasksList';\n\nfunction Tasks() {\n\n  const {\n    setAllDone,\n  } = useTasks();\n\n  return (\n    <MainContainer>\n      <Header\n        title=\"Lista zadań\"\n      />\n      <Container>\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form />}\n        />\n        <Section\n          title=\"Lista zadań\"\n          extrasToHeader={<Buttons setAllDone={setAllDone} />}\n          body={<TasksList />}\n        />\n      </Container>\n    </MainContainer>\n  );\n}\n\nexport default Tasks;\n","import { useState, useEffect } from 'react';\n\nexport const useTasks = () => {\n\n    const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || []);\n\n    useEffect(() => {\n        localStorage.setItem(`tasks`, JSON.stringify(tasks));\n    }, [tasks]);\n\n\n    const removeTask = (id) => {\n        setTasks(tasks => tasks.filter(task => task.id !== id));\n    };\n\n    const setAllDone = () => {\n        setTasks(tasks => tasks.map(task => ({ ...task, done: true, })));\n    };\n\n    const addNewTask = (newTaskContent) => {\n        setTasks(tasks => [...tasks, { content: newTaskContent, done: false, id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1, },]);\n    };\n    return {\n        removeTask,\n        setAllDone,\n        addNewTask,\n    };\n};\n","import React from \"react\";\nimport Tasks from \"./features/tasks/Tasks\";\n\nexport default function App() {\n    return <Tasks />\n}; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n  box-sizing: border-box;\n}\n\n*, ::after, ::before {\n  box-sizing: inherit;\n}\n\nbody {\n  background-color: #eeeeee;\n  max-width: 1000px;\n  margin: 50px auto;\n  font-family: 'Roboto', sans-serif;\n  padding: 10px;\n}\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { GlobalStyle } from \"./GlobalStyle\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}