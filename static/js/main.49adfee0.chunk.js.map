{"version":3,"sources":["Form/style.js","Form/index.js","Tasks/index.js","Buttons/style.js","Buttons/index.js","Section/style.js","Section/index.js","Header/style.js","Header/index.js","Container/style.js","Container/index.js","MainContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["StyledForm","styled","form","Input","input","Button","button","Form","addNewTask","useState","newTaskContent","setNewTaskContent","onSubmit","event","preventDefault","trim","value","placeholder","onChange","target","Ul","ul","Li","li","display","done","css","toDelete","Tasks","props","tasks","map","task","hideDoneTasks","key","id","onClick","toggleTaskDone","className","content","removeTask","Span","span","Buttons","length","toggleHideDoneTask","setAllDone","disabled","every","Section","section","H2","h2","Div","div","Sections","title","extrasToHeader","body","Fragment","Title","h1","StyledHeader","header","Header","Container","children","MainContainer","App","setHideDoneTask","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.49adfee0.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst StyledForm = styled.form`\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n    flex-wrap: wrap;\n`;\n\nconst Input = styled.input`\n    border: 1px solid #ccc;\n    flex-grow: 1;\n    padding: 9px;\n    align-self: center;\n\n    @media (max-width: 767px) {\n        height: 45px;\n    }\n`;\n\nconst Button = styled.button`\n    background-color: teal;\n    box-shadow: 0 0 5px #ccc;\n    border: none;\n    color: rgba(255, 255, 255, 0.801);\n    transition: 0.5s;\n    margin-left: 15px;\n\n    &:hover {\n        opacity: 0.7;\n        transform: scale(1.1);\n    }\n\n    @media (max-width: 767px) {\n        flex-grow: 1;\n        align-self: center;\n        height: 45px;\n        margin: 10px;\n    }\n`;\n\nexport { StyledForm, Input, Button };","import React, { useState } from \"react\";\nimport { StyledForm, Input, Button } from \"./style.js\";\n\n\nconst Form = ({ addNewTask }) => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        \n        if (newTaskContent.trim() === \"\") {\n            return;\n        };\n\n        addNewTask(newTaskContent.trim());\n        setNewTaskContent(\"\");\n    };\n\n    return (\n        <StyledForm onSubmit={onFormSubmit}>\n            <Input value={newTaskContent} placeholder=\"Co jest do zrobienia?\" onChange={(event) => setNewTaskContent(event.target.value)} />\n            <Button>Dodaj zadanie</Button>\n        </StyledForm>\n    );\n};\n\nexport default Form;","import React from \"react\";\nimport \"./style.css\";\nimport styled, { css } from \"styled-components\";\n\nconst Ul = styled.ul`\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n`;\n\nconst Li = styled.li`\n    display: ${({ display }) => display || \"flex\"};\n    width: 100%;\n    justify-content: space-around;\n    border-bottom: 1px solid #eeeeee;\n`;\n\nconst Button = styled.button`\n    margin: 10px;\n    height: 30px;\n    width: 30px;\n    color: white;\n    box-shadow: none;\n    border: none;\n    align-self: center;\n    padding: 10px;\n    display: flex;\n    transition: 0.5s;\n\n    &:hover {\n        opacity: 0.7;\n    }\n\n    ${({ done }) => done && css`\n        background-color: green;\n    `}\n\n    ${({ toDelete }) => toDelete && css`\n        background-color: red;\n    `}\n`;\n\nconst Tasks = (props) => (\n    <Ul>\n        {props.tasks.map(task => (\n            <Li display={`${task.done && props.hideDoneTasks ? \"none\" : \"\"}`} key={task.id} >\n                <Button done onClick={() => props.toggleTaskDone(task.id)}>\n                    <i className={`fas${task.done ? \" fa-check\" : \"--none fa-check\"} `}></i>\n                </Button>\n                <span className={`listedTask__content${task.done ? \"--done\" : \"\"} `}>\n                    {task.content}\n                </span>\n                <Button toDelete onClick={() => props.removeTask(task.id)}>\n                    <span className=\"far fa-trash-alt\"></span>\n                </Button>\n            </Li>\n        ))}\n    </Ul>\n);\n\nexport default Tasks;","import styled from \"styled-components\";\n\nconst Span = styled.span`\n    display: flex;\n    justify-content: center;\n\n    @media (max-width: 466px) {\n        flex-direction: column;\n        align-items: flex-start;\n    }\n`;\n\nconst Button = styled.button`\n    border: none;\n    background-color: white;\n    color: teal;\n    padding: 0 10px;\n    transition: 0.5s;\n\n    &:hover {\n        opacity: 0.7;\n    }\n\n    &:disabled {\n        color: grey;\n    }\n\n    @media (max-width: 466px) {\n        margin: 5px 0;\n    }\n`;\n\nexport { Span, Button };\n","import React from \"react\";\nimport { Span, Button } from \"./style.js\";\n\nconst Buttons = (props) => {\n    if (props.tasks.length === 0) {\n        return null;\n    }\n\n    return (\n        <Span>\n            <Button onClick={props.toggleHideDoneTask}>{props.hideDoneTasks ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}</Button>\n            <Button onClick={props.setAllDone} disabled={props.tasks.every(({ done }) => done)}>Ukończ wszystkie</Button>\n        </Span>\n    )\n}\n\nexport default Buttons;","import styled from \"styled-components\";\n\nconst Section = styled.section`\n    background-color: white;\n    padding: 15px;\n    box-shadow: 0 0 5px #ccc;\n    display: flex;\n    flex-wrap: wrap;\n    margin: 2px;\n`;\n\nconst H2 = styled.h2`\n    flex-grow: 1;\n    align-self: center; \n    justify-self: center;\n    margin: 8px;\n`;\n\nconst Div = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-wrap: wrap;\n    width: 100vw;\n`;\n\nexport { Section, H2, Div };","import React from \"react\";\nimport { Section, H2, Div } from \"./style.js\";\n\nconst Sections = ({ title, extrasToHeader, body }) => (\n    <React.Fragment>\n        <Section>\n            <H2>{title}</H2>\n            {extrasToHeader}\n        </Section>\n        <Section>\n            <Div>\n                {body}\n            </Div>\n        </Section>\n    </React.Fragment>\n);\n\nexport default Sections;\n","import styled from \"styled-components\";\nimport \"../fonts.css\";\n\nconst Title = styled.h1`\n    font-size: 2.5em;\n    margin-left: 10px;\n    font-family: 'Rubik', sans-serif;\n`;\n\nconst StyledHeader = styled.header`\n\n`;\n\nexport { Title, StyledHeader };","import React from 'react';\nimport { Title, StyledHeader } from \"./style.js\";\n\nconst Header = ({title}) => (\n    <StyledHeader className=\"header\">\n        <Title className=\"header__title\">{title}</Title>\n    </StyledHeader>\n);\n\nexport default Header;","import styled from \"styled-components\";\n\nexport const Div = styled.div`\n    display: flex;\n    flex-direction: column; \n`;\n\n","import React from \"react\";\nimport { Div } from \"./style.js\";\n\n\nconst Container = (props) => (\n    <Div>\n        {props.children}\n    </Div>\n);\n\nexport default Container;\n","import React from \"react\";\n\nconst MainContainer = (props) => (\n    <main>\n        {props.children}\n    </main>\n\n)\n\nexport default MainContainer;","import React, { useState, useEffect } from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from './Section';\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport MainContainer from \"./MainContainer\";\n\n\nfunction App() {\n  const [hideDoneTasks, setHideDoneTask] = useState(false);\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || []);\n\n  useEffect(() => {\n    localStorage.setItem(`tasks`, JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDoneTask = () => {\n    setHideDoneTask(hideDoneTasks => !hideDoneTasks);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({ ...task, done: true, })));\n  };\n\n  const addNewTask = (newTaskContent) => {\n    setTasks(tasks => [...tasks, { content: newTaskContent, done: false, id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1, },]);\n  };\n\n  return (\n    <MainContainer>\n      <Header\n        title=\"Lista zadań\"\n      />\n      <Container>\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form addNewTask={addNewTask} />}\n        />\n        <Section\n          title=\"Lista zadań\"\n          extrasToHeader={<Buttons tasks={tasks} hideDoneTasks={hideDoneTasks} toggleHideDoneTask={toggleHideDoneTask} setAllDone={setAllDone} />}\n          body={<Tasks tasks={tasks} hideDoneTasks={hideDoneTasks} removeTask={removeTask} toggleTaskDone={toggleTaskDone} />}\n        />\n      </Container>\n    </MainContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}