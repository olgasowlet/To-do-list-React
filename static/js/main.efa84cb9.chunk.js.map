{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","MainContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","placeholder","onChange","target","Tasks","props","tasks","map","task","key","id","done","hideDoneTasks","onClick","toggleTaskDone","content","removeTask","Buttons","length","toggleHideDoneTask","setAllDone","disabled","every","Section","title","extrasToHeader","body","Fragment","Header","Container","children","MainContainer","App","setHideDoneTask","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.efa84cb9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./style.css\";\n\nconst Form = ({ addNewTask }) => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        \n        if (newTaskContent.trim() === \"\") {\n            return;\n        };\n\n        addNewTask(newTaskContent.trim());\n        setNewTaskContent(\"\");\n    };\n\n    return (\n        <form className=\"form\" onSubmit={onFormSubmit}>\n            <input value={newTaskContent} className=\"form__input\" placeholder=\"Co jest do zrobienia?\" onChange={(event) => setNewTaskContent(event.target.value)} />\n            <button className=\"form__button\">Dodaj zadanie</button>\n        </form>\n    );\n};\n\nexport default Form;","import React from \"react\";\nimport \"./style.css\"\n\nconst Tasks = (props) => (\n    <ul className=\"listOfTasks\">\n        {props.tasks.map(task => (\n            <li key={task.id} className={`listedTask${task.done && props.hideDoneTasks ? \" listedTask--hidden\" : \"\"}`}>\n                <button onClick={() => props.toggleTaskDone(task.id)} className={`listedTask__button listedTask__button--doner`}>\n                    <i className={`fas${task.done ? \" fa-check\" : \"--none fa-check\"}`}></i>\n                </button>\n                <span className={`listedTask__content${task.done ? \"--done\" : \"\"}`}>\n                    {task.content}\n                </span>\n                <button onClick={() => props.removeTask(task.id)} className=\"listedTask__button listedTask__button--remover\">\n                    <span className=\"far fa-trash-alt\"></span>\n                </button>\n            </li>\n        ))}\n    </ul>\n);\n\nexport default Tasks;","import React from \"react\";\nimport \"../Container/style.css\";\n\nconst Buttons = (props) => {\n    if (props.tasks.length === 0) {\n        return null;\n    }\n\n    return (\n        <span className=\"section__span\">\n            <button onClick={props.toggleHideDoneTask} className=\"section__button\">{props.hideDoneTasks ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}</button>\n            <button onClick={props.setAllDone} className=\"section__button\" disabled={props.tasks.every(({ done }) => done)}>Ukończ wszystkie</button>\n        </span>\n    )\n}\n\nexport default Buttons;","import React from \"react\";\nimport \"../Container/style.css\";\n\nconst Section = ({ title, extrasToHeader, body }) => (\n    <React.Fragment>\n        <section className=\"section\">\n            <h2 className=\"section__header\">{title}</h2>\n            {extrasToHeader}\n        </section>\n        <section className=\"section\">\n            <div className=\"section__div section__div--tasks\">\n                {body}\n            </div>\n        </section>\n    </React.Fragment>\n);\n\nexport default Section;\n\n//Wiem, że tutaj słabo stworzyłam znaczniki. Mam dwie sekcje, które mają różne zawartosci (w przeciwieństwie do Chrisa, który ma header i body w jednym section).\n// Dlatego musiałam dodać to wszystko w divie albo stworzyć 2 różne komponenty. \n//Teraz idę nadrbiać ale zostawiam ten komenatrz, żeby to kiedyś poprawić :D\n\n//EDIT: zamiast <div> <React.Fragment> :D","import React from 'react';\nimport \"../Container/style.css\";\n\nconst Header = ({title}) => (\n    <header className=\"header\">\n        <h1 className=\"header__title\">{title}</h1>\n    </header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst Container = (props) => (\n    <div className=\"container\">\n        {props.children}\n    </div>\n);\n\nexport default Container;\n","import React from \"react\";\n\nconst MainContainer = (props) => (\n    <main>\n        {props.children}\n    </main>\n\n)\n\nexport default MainContainer;","import React, { useState, useEffect } from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from './Section';\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport MainContainer from \"./MainContainer\";\n\n\nfunction App() {\n  const [hideDoneTasks, setHideDoneTask] = useState(false);\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || []);\n\n  useEffect(() => {\n    localStorage.setItem(`tasks`, JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDoneTask = () => {\n    setHideDoneTask(hideDoneTasks => !hideDoneTasks);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({ ...task, done: true, })));\n  };\n\n  const addNewTask = (newTaskContent) => {\n    setTasks(tasks => [...tasks, { content: newTaskContent, done: false, id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1, },]);\n  };\n\n  return (\n    <MainContainer>\n      <Header\n        title=\"Lista zadań\"\n      />\n      <Container>\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form addNewTask={addNewTask} />}\n        />\n        <Section\n          title=\"Lista zadań\"\n          extrasToHeader={<Buttons tasks={tasks} hideDoneTasks={hideDoneTasks} toggleHideDoneTask={toggleHideDoneTask} setAllDone={setAllDone} />}\n          body={<Tasks tasks={tasks} hideDoneTasks={hideDoneTasks} removeTask={removeTask} toggleTaskDone={toggleTaskDone} />}\n        />\n      </Container>\n    </MainContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}